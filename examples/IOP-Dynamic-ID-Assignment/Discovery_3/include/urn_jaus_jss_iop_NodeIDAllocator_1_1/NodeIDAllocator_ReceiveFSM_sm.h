#ifndef _H_NODEIDALLOCATOR_RECEIVEFSM_SM
#define _H_NODEIDALLOCATOR_RECEIVEFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NodeIDAllocator_ReceiveFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_iop_NodeIDAllocator_1_1
{
    // Forward declarations.
    class NodeIDAllocator_ReceiveFSM_SM;
    class NodeIDAllocator_ReceiveFSM_SM_Receiving;
    class NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class NodeIDAllocator_ReceiveFSM_SM_Default;
    class NodeIDAllocator_ReceiveFSMState;
    class NodeIDAllocator_ReceiveFSMContext;
    class NodeIDAllocator_ReceiveFSM;

    class NodeIDAllocator_ReceiveFSMState :
        public statemap::State
    {
    public:

        NodeIDAllocator_ReceiveFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(NodeIDAllocator_ReceiveFSMContext&) {};
        virtual void Exit(NodeIDAllocator_ReceiveFSMContext&) {};

        virtual void BroadcastGlobalTransition(NodeIDAllocator_ReceiveFSMContext& context);
        virtual void BroadcastLocalTransition(NodeIDAllocator_ReceiveFSMContext& context);
        virtual void ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context);
        virtual void ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context, RequestNodeID& msg, Receive::Body::ReceiveRec& transportData);
        virtual void RequestNodeIDTransition(NodeIDAllocator_ReceiveFSMContext& context);
        virtual void SendTransition(NodeIDAllocator_ReceiveFSMContext& context);

    protected:

        virtual void Default(NodeIDAllocator_ReceiveFSMContext& context);
    };

    class NodeIDAllocator_ReceiveFSM_SM
    {
    public:

        static NodeIDAllocator_ReceiveFSM_SM_Receiving Receiving;
        static NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class NodeIDAllocator_ReceiveFSM_SM_Default :
        public NodeIDAllocator_ReceiveFSMState
    {
    public:

        NodeIDAllocator_ReceiveFSM_SM_Default(const char *name, int stateId)
        : NodeIDAllocator_ReceiveFSMState(name, stateId)
        {};

    };

    class NodeIDAllocator_ReceiveFSM_SM_Receiving :
        public NodeIDAllocator_ReceiveFSM_SM_Default
    {
    public:
        NodeIDAllocator_ReceiveFSM_SM_Receiving(const char *name, int stateId)
        : NodeIDAllocator_ReceiveFSM_SM_Default(name, stateId)
        {};

        void ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context, RequestNodeID& msg, Receive::Body::ReceiveRec& transportData);
    };

    class NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public NodeIDAllocator_ReceiveFSM_SM_Default
    {
    public:
        NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : NodeIDAllocator_ReceiveFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(NodeIDAllocator_ReceiveFSMContext& context);
        void BroadcastLocalTransition(NodeIDAllocator_ReceiveFSMContext& context);
        void ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context);
        void RequestNodeIDTransition(NodeIDAllocator_ReceiveFSMContext& context);
        void SendTransition(NodeIDAllocator_ReceiveFSMContext& context);
    };

    class NodeIDAllocator_ReceiveFSMContext :
        public statemap::FSMContext
    {
    public:

        NodeIDAllocator_ReceiveFSMContext(NodeIDAllocator_ReceiveFSM& owner)
        : FSMContext(NodeIDAllocator_ReceiveFSM_SM::Receiving),
          _owner(owner)
        {};

        NodeIDAllocator_ReceiveFSMContext(NodeIDAllocator_ReceiveFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        NodeIDAllocator_ReceiveFSM& getOwner() const
        {
            return (_owner);
        };

        NodeIDAllocator_ReceiveFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<NodeIDAllocator_ReceiveFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition(RequestNodeID& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void RequestNodeIDTransition()
        {
            setTransition("RequestNodeIDTransition");
            (getState()).RequestNodeIDTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

    private:

        NodeIDAllocator_ReceiveFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_NODEIDALLOCATOR_RECEIVEFSM_SM
