#ifndef _H_NODEIDALLOCATOR_SENDFSM_SM
#define _H_NODEIDALLOCATOR_SENDFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NodeIDAllocator_SendFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_iop_NodeIDAllocator_1_1
{
    // Forward declarations.
    class NodeIDAllocator_SendFSM_SM;
    class NodeIDAllocator_SendFSM_SM_Sending;
    class NodeIDAllocator_SendFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class NodeIDAllocator_SendFSM_SM_Default;
    class NodeIDAllocator_SendFSMState;
    class NodeIDAllocator_SendFSMContext;
    class NodeIDAllocator_SendFSM;

    class NodeIDAllocator_SendFSMState :
        public statemap::State
    {
    public:

        NodeIDAllocator_SendFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(NodeIDAllocator_SendFSMContext&) {};
        virtual void Exit(NodeIDAllocator_SendFSMContext&) {};

        virtual void BroadcastGlobalTransition(NodeIDAllocator_SendFSMContext& context);
        virtual void BroadcastLocalTransition(NodeIDAllocator_SendFSMContext& context);
        virtual void ReceiveTransition(NodeIDAllocator_SendFSMContext& context);
        virtual void RequestNodeIDTransition(NodeIDAllocator_SendFSMContext& context);
        virtual void SendTransition(NodeIDAllocator_SendFSMContext& context);

    protected:

        virtual void Default(NodeIDAllocator_SendFSMContext& context);
    };

    class NodeIDAllocator_SendFSM_SM
    {
    public:

        static NodeIDAllocator_SendFSM_SM_Sending Sending;
        static NodeIDAllocator_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class NodeIDAllocator_SendFSM_SM_Default :
        public NodeIDAllocator_SendFSMState
    {
    public:

        NodeIDAllocator_SendFSM_SM_Default(const char *name, int stateId)
        : NodeIDAllocator_SendFSMState(name, stateId)
        {};

    };

    class NodeIDAllocator_SendFSM_SM_Sending :
        public NodeIDAllocator_SendFSM_SM_Default
    {
    public:
        NodeIDAllocator_SendFSM_SM_Sending(const char *name, int stateId)
        : NodeIDAllocator_SendFSM_SM_Default(name, stateId)
        {};

    };

    class NodeIDAllocator_SendFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public NodeIDAllocator_SendFSM_SM_Default
    {
    public:
        NodeIDAllocator_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : NodeIDAllocator_SendFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(NodeIDAllocator_SendFSMContext& context);
        void BroadcastLocalTransition(NodeIDAllocator_SendFSMContext& context);
        void ReceiveTransition(NodeIDAllocator_SendFSMContext& context);
        void RequestNodeIDTransition(NodeIDAllocator_SendFSMContext& context);
        void SendTransition(NodeIDAllocator_SendFSMContext& context);
    };

    class NodeIDAllocator_SendFSMContext :
        public statemap::FSMContext
    {
    public:

        NodeIDAllocator_SendFSMContext(NodeIDAllocator_SendFSM& owner)
        : FSMContext(NodeIDAllocator_SendFSM_SM::Sending),
          _owner(owner)
        {};

        NodeIDAllocator_SendFSMContext(NodeIDAllocator_SendFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        NodeIDAllocator_SendFSM& getOwner() const
        {
            return (_owner);
        };

        NodeIDAllocator_SendFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<NodeIDAllocator_SendFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void RequestNodeIDTransition()
        {
            setTransition("RequestNodeIDTransition");
            (getState()).RequestNodeIDTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

    private:

        NodeIDAllocator_SendFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_NODEIDALLOCATOR_SENDFSM_SM
