/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Discovery_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_core_Discovery_1_1/Messages/MessageSet.h"
#include "urn_jaus_jss_core_Discovery_1_1/Discovery_ReceiveFSM.h"
#include "include/urn_jaus_jss_core_Discovery_1_1/Discovery_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_core_Discovery_1_1
{
    // Static class declarations.
    Discovery_ReceiveFSM_SM_Receiving_Ready Discovery_ReceiveFSM_SM::Receiving_Ready("Discovery_ReceiveFSM_SM::Receiving_Ready", 0);
    Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void Discovery_ReceiveFSMState::BroadcastGlobalTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::BroadcastLocalTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::CancelEventTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::CommandCompletedTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::CommandExpiredTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::CreateCommandEventTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::CreateEventTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::EventErrorTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::EventOccurredTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryConfigurationTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryEventTimeoutTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryEventsTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryIdentificationTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryServiceListTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QueryServicesTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::QuerySubsystemListTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryConfiguration& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryIdentification& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryServiceList& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, QuerySubsystemList& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::ReceiveTransition(Discovery_ReceiveFSMContext& context, RegisterServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::RegisterServicesTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::SendTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::TimeoutTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::UpdateEventTransition(Discovery_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Discovery_ReceiveFSMState::Default(Discovery_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryConfiguration& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryConfiguration& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryConfiguration& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryIdentification& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryIdentification& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryIdentification& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryServiceList& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryServiceList& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryServiceList& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, QueryServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryServices& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QueryServices& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, QuerySubsystemList& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QuerySubsystemList& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(QuerySubsystemList& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(Discovery_ReceiveFSMContext& context, RegisterServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        Discovery_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        Discovery_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(RegisterServices& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.PublishServicesAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(RegisterServices& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CommandCompletedTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CommandCompletedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CommandCompletedTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CommandExpiredTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CommandExpiredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CommandExpiredTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateCommandEventTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateCommandEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateCommandEventTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryConfigurationTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventTimeoutTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryIdentificationTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryIdentificationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryIdentificationTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryServiceListTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryServiceListTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryServiceListTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryServicesTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryServicesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryServicesTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySubsystemListTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySubsystemListTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySubsystemListTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RegisterServicesTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RegisterServicesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RegisterServicesTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Discovery_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(Discovery_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Discovery_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
