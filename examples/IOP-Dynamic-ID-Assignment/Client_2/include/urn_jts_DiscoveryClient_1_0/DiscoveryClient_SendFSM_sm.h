#ifndef _H_DISCOVERYCLIENT_SENDFSM_SM
#define _H_DISCOVERYCLIENT_SENDFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : DiscoveryClient_SendFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jts_DiscoveryClient_1_0
{
    // Forward declarations.
    class DiscoveryClient_SendFSM_SM;
    class DiscoveryClient_SendFSM_SM_Sending;
    class DiscoveryClient_SendFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class DiscoveryClient_SendFSM_SM_Default;
    class DiscoveryClient_SendFSMState;
    class DiscoveryClient_SendFSMContext;
    class DiscoveryClient_SendFSM;

    class DiscoveryClient_SendFSMState :
        public statemap::State
    {
    public:

        DiscoveryClient_SendFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(DiscoveryClient_SendFSMContext&) {};
        virtual void Exit(DiscoveryClient_SendFSMContext&) {};

        virtual void BroadcastGlobalTransition(DiscoveryClient_SendFSMContext& context);
        virtual void BroadcastLocalTransition(DiscoveryClient_SendFSMContext& context);
        virtual void GrantNodeIDTransition(DiscoveryClient_SendFSMContext& context);
        virtual void RHP_TimeoutTransition(DiscoveryClient_SendFSMContext& context);
        virtual void ReceiveTransition(DiscoveryClient_SendFSMContext& context);
        virtual void ReportHeartbeatPulseTransition(DiscoveryClient_SendFSMContext& context);
        virtual void ReportIdentificationTransition(DiscoveryClient_SendFSMContext& context);
        virtual void ReportServicesTransition(DiscoveryClient_SendFSMContext& context);
        virtual void SendTransition(DiscoveryClient_SendFSMContext& context);

    protected:

        virtual void Default(DiscoveryClient_SendFSMContext& context);
    };

    class DiscoveryClient_SendFSM_SM
    {
    public:

        static DiscoveryClient_SendFSM_SM_Sending Sending;
        static DiscoveryClient_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class DiscoveryClient_SendFSM_SM_Default :
        public DiscoveryClient_SendFSMState
    {
    public:

        DiscoveryClient_SendFSM_SM_Default(const char *name, int stateId)
        : DiscoveryClient_SendFSMState(name, stateId)
        {};

    };

    class DiscoveryClient_SendFSM_SM_Sending :
        public DiscoveryClient_SendFSM_SM_Default
    {
    public:
        DiscoveryClient_SendFSM_SM_Sending(const char *name, int stateId)
        : DiscoveryClient_SendFSM_SM_Default(name, stateId)
        {};

    };

    class DiscoveryClient_SendFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public DiscoveryClient_SendFSM_SM_Default
    {
    public:
        DiscoveryClient_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : DiscoveryClient_SendFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(DiscoveryClient_SendFSMContext& context);
        void BroadcastLocalTransition(DiscoveryClient_SendFSMContext& context);
        void GrantNodeIDTransition(DiscoveryClient_SendFSMContext& context);
        void RHP_TimeoutTransition(DiscoveryClient_SendFSMContext& context);
        void ReceiveTransition(DiscoveryClient_SendFSMContext& context);
        void ReportHeartbeatPulseTransition(DiscoveryClient_SendFSMContext& context);
        void ReportIdentificationTransition(DiscoveryClient_SendFSMContext& context);
        void ReportServicesTransition(DiscoveryClient_SendFSMContext& context);
        void SendTransition(DiscoveryClient_SendFSMContext& context);
    };

    class DiscoveryClient_SendFSMContext :
        public statemap::FSMContext
    {
    public:

        DiscoveryClient_SendFSMContext(DiscoveryClient_SendFSM& owner)
        : FSMContext(DiscoveryClient_SendFSM_SM::Sending),
          _owner(owner)
        {};

        DiscoveryClient_SendFSMContext(DiscoveryClient_SendFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        DiscoveryClient_SendFSM& getOwner() const
        {
            return (_owner);
        };

        DiscoveryClient_SendFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<DiscoveryClient_SendFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void GrantNodeIDTransition()
        {
            setTransition("GrantNodeIDTransition");
            (getState()).GrantNodeIDTransition(*this);
            setTransition(NULL);
        };

        void RHP_TimeoutTransition()
        {
            setTransition("RHP_TimeoutTransition");
            (getState()).RHP_TimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReportHeartbeatPulseTransition()
        {
            setTransition("ReportHeartbeatPulseTransition");
            (getState()).ReportHeartbeatPulseTransition(*this);
            setTransition(NULL);
        };

        void ReportIdentificationTransition()
        {
            setTransition("ReportIdentificationTransition");
            (getState()).ReportIdentificationTransition(*this);
            setTransition(NULL);
        };

        void ReportServicesTransition()
        {
            setTransition("ReportServicesTransition");
            (getState()).ReportServicesTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

    private:

        DiscoveryClient_SendFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_DISCOVERYCLIENT_SENDFSM_SM
