/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NodeIDAllocator_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_iop_NodeIDAllocator_1_1/Messages/MessageSet.h"
#include "urn_jaus_jss_iop_NodeIDAllocator_1_1/NodeIDAllocator_ReceiveFSM.h"
#include "include/urn_jaus_jss_iop_NodeIDAllocator_1_1/NodeIDAllocator_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_iop_NodeIDAllocator_1_1
{
    // Static class declarations.
    NodeIDAllocator_ReceiveFSM_SM_Receiving NodeIDAllocator_ReceiveFSM_SM::Receiving("NodeIDAllocator_ReceiveFSM_SM::Receiving", 0);
    NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void NodeIDAllocator_ReceiveFSMState::BroadcastGlobalTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::BroadcastLocalTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context, RequestNodeID& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::RequestNodeIDTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::SendTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void NodeIDAllocator_ReceiveFSMState::Default(NodeIDAllocator_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Receiving::ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context, RequestNodeID& msg, Receive::Body::ReceiveRec& transportData)
    {
        NodeIDAllocator_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Receiving"
            << std::endl;
        }

        NodeIDAllocator_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Receiving::ReceiveTransition(RequestNodeID& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.sendGrantNodeIDAction(msg);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Receiving::ReceiveTransition(RequestNodeID& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestNodeIDTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestNodeIDTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestNodeIDTransition()"
                << std::endl;
        }


        return;
    }

    void NodeIDAllocator_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(NodeIDAllocator_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : NodeIDAllocator_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
