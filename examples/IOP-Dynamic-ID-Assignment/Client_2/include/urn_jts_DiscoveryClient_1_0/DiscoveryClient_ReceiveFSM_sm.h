#ifndef _H_DISCOVERYCLIENT_RECEIVEFSM_SM
#define _H_DISCOVERYCLIENT_RECEIVEFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : DiscoveryClient_ReceiveFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jts_DiscoveryClient_1_0
{
    // Forward declarations.
    class DiscoveryClient_ReceiveFSM_SM;
    class DiscoveryClient_ReceiveFSM_SM_Receiving_Ready;
    class DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class DiscoveryClient_ReceiveFSM_SM_Default;
    class DiscoveryClient_ReceiveFSMState;
    class DiscoveryClient_ReceiveFSMContext;
    class DiscoveryClient_ReceiveFSM;

    class DiscoveryClient_ReceiveFSMState :
        public statemap::State
    {
    public:

        DiscoveryClient_ReceiveFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(DiscoveryClient_ReceiveFSMContext&) {};
        virtual void Exit(DiscoveryClient_ReceiveFSMContext&) {};

        virtual void BroadcastGlobalTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void BroadcastLocalTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void GrantNodeIDTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, GrantNodeID& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData);
        virtual void ReportHeartbeatPulseTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void ReportIdentificationTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void ReportServicesTransition(DiscoveryClient_ReceiveFSMContext& context);
        virtual void SendTransition(DiscoveryClient_ReceiveFSMContext& context);

    protected:

        virtual void Default(DiscoveryClient_ReceiveFSMContext& context);
    };

    class DiscoveryClient_ReceiveFSM_SM
    {
    public:

        static DiscoveryClient_ReceiveFSM_SM_Receiving_Ready Receiving_Ready;
        static DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class DiscoveryClient_ReceiveFSM_SM_Default :
        public DiscoveryClient_ReceiveFSMState
    {
    public:

        DiscoveryClient_ReceiveFSM_SM_Default(const char *name, int stateId)
        : DiscoveryClient_ReceiveFSMState(name, stateId)
        {};

    };

    class DiscoveryClient_ReceiveFSM_SM_Receiving_Ready :
        public DiscoveryClient_ReceiveFSM_SM_Default
    {
    public:
        DiscoveryClient_ReceiveFSM_SM_Receiving_Ready(const char *name, int stateId)
        : DiscoveryClient_ReceiveFSM_SM_Default(name, stateId)
        {};

        void RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context);
        void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, GrantNodeID& msg, Receive::Body::ReceiveRec& transportData);
        void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData);
        void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData);
        void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData);
    };

    class DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public DiscoveryClient_ReceiveFSM_SM_Default
    {
    public:
        DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : DiscoveryClient_ReceiveFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(DiscoveryClient_ReceiveFSMContext& context);
        void BroadcastLocalTransition(DiscoveryClient_ReceiveFSMContext& context);
        void GrantNodeIDTransition(DiscoveryClient_ReceiveFSMContext& context);
        void RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context);
        void ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context);
        void ReportHeartbeatPulseTransition(DiscoveryClient_ReceiveFSMContext& context);
        void ReportIdentificationTransition(DiscoveryClient_ReceiveFSMContext& context);
        void ReportServicesTransition(DiscoveryClient_ReceiveFSMContext& context);
        void SendTransition(DiscoveryClient_ReceiveFSMContext& context);
    };

    class DiscoveryClient_ReceiveFSMContext :
        public statemap::FSMContext
    {
    public:

        DiscoveryClient_ReceiveFSMContext(DiscoveryClient_ReceiveFSM& owner)
        : FSMContext(DiscoveryClient_ReceiveFSM_SM::Receiving_Ready),
          _owner(owner)
        {};

        DiscoveryClient_ReceiveFSMContext(DiscoveryClient_ReceiveFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        DiscoveryClient_ReceiveFSM& getOwner() const
        {
            return (_owner);
        };

        DiscoveryClient_ReceiveFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<DiscoveryClient_ReceiveFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void GrantNodeIDTransition()
        {
            setTransition("GrantNodeIDTransition");
            (getState()).GrantNodeIDTransition(*this);
            setTransition(NULL);
        };

        void RHP_TimeoutTransition()
        {
            setTransition("RHP_TimeoutTransition");
            (getState()).RHP_TimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition(GrantNodeID& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(ReportServices& msg, Receive::Body::ReceiveRec& transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReportHeartbeatPulseTransition()
        {
            setTransition("ReportHeartbeatPulseTransition");
            (getState()).ReportHeartbeatPulseTransition(*this);
            setTransition(NULL);
        };

        void ReportIdentificationTransition()
        {
            setTransition("ReportIdentificationTransition");
            (getState()).ReportIdentificationTransition(*this);
            setTransition(NULL);
        };

        void ReportServicesTransition()
        {
            setTransition("ReportServicesTransition");
            (getState()).ReportServicesTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

    private:

        DiscoveryClient_ReceiveFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_DISCOVERYCLIENT_RECEIVEFSM_SM
