/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : DiscoveryClient_ReceiveFSM_sm.sm
 */

#include "urn_jts_DiscoveryClient_1_0/Messages/MessageSet.h"
#include "urn_jts_DiscoveryClient_1_0/DiscoveryClient_ReceiveFSM.h"
#include "include/urn_jts_DiscoveryClient_1_0/DiscoveryClient_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jts_DiscoveryClient_1_0
{
    // Static class declarations.
    DiscoveryClient_ReceiveFSM_SM_Receiving_Ready DiscoveryClient_ReceiveFSM_SM::Receiving_Ready("DiscoveryClient_ReceiveFSM_SM::Receiving_Ready", 0);
    DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void DiscoveryClient_ReceiveFSMState::BroadcastGlobalTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::BroadcastLocalTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::GrantNodeIDTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, GrantNodeID& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReportHeartbeatPulseTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReportIdentificationTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::ReportServicesTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::SendTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void DiscoveryClient_ReceiveFSMState::Default(DiscoveryClient_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Receiving_Ready::RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context)
    {
        DiscoveryClient_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        DiscoveryClient_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::RHP_TimeoutTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleTimeoutAction();
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::RHP_TimeoutTransition()"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, GrantNodeID& msg, Receive::Body::ReceiveRec& transportData)
    {
        DiscoveryClient_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        DiscoveryClient_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(GrantNodeID& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.updateNodeIDAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(GrantNodeID& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData)
    {
        DiscoveryClient_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        if (ctxt.fromMasterModule( transportData ))
        {
            DiscoveryClient_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.updateSubsystemIDAction(transportData);
                //ctxt.registerServicesAction(transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportHeartbeatPulse& msg, Receive::Body::ReceiveRec& transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             DiscoveryClient_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)
    {
        DiscoveryClient_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        DiscoveryClient_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.handleMessageAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportIdentification& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Receiving_Ready::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context, ReportServices& msg, Receive::Body::ReceiveRec& transportData)
    {
        DiscoveryClient_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready"
            << std::endl;
        }

        DiscoveryClient_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportServices& msg, Receive::Body::ReceiveRec& transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.parseServiceListAction(msg, transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Receiving_Ready::ReceiveTransition(ReportServices& msg, Receive::Body::ReceiveRec& transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::GrantNodeIDTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::GrantNodeIDTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::GrantNodeIDTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RHP_TimeoutTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RHP_TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RHP_TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportHeartbeatPulseTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportIdentificationTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReportServicesTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportServicesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReportServicesTransition()"
                << std::endl;
        }


        return;
    }

    void DiscoveryClient_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(DiscoveryClient_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DiscoveryClient_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
